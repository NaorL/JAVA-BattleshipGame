package Logic;

import AutoGeneratedClasses.BattleShipGame;
import Exceptions.CorruptedXMLException;
import Exceptions.MineInstallationException;
import javafx.beans.property.SimpleStringProperty;

import java.io.Serializable;
import java.util.*;

public class Player implements Serializable {
    private static final long serialVersionUID = 1L;
    private int playerIndex;
    private String name;
    private int hit;
    private int miss;
    private int score;
    private long totalTimeToAttack;
    private float avgTimeToAttack;
    private int numOfTurnsPlayed;
    private BattleShipBoard battleShipBoard = new BattleShipBoard();
    private TrackingBoard trackingBoard = new TrackingBoard();
    private HitResult hitResult = new HitResult();
    private List<BattleShipGame.ShipTypes.ShipType> enemyShipsList;
    private final float TO_SECONDS = 1000;

    public int GetNumOfMinesLeft(){
        return battleShipBoard.GetNumOfAvailableMines();
    }

    public int GetScore(){
        return score;
    }

    public List<BattleShipGame.ShipTypes.ShipType> GetEnemyShipsInformation() {
        return enemyShipsList;
    }

    public class HitResult implements Serializable {
        private static final long serialVersionUID = 9L;
        String hitObject;
        boolean isShipSank;
    }

    public Player(int i_PlayerIndex) {
        playerIndex = i_PlayerIndex;
        enemyShipsList = new ArrayList<>();
    }

    public String GetPlayerName(){
        return name;
    }

    public void SetPlayerName(String i_Name){
        name = i_Name;
    }

    public int GetHit() {
        return hit;
    }

    public long GetTotalTimeToAttack() {
        return totalTimeToAttack;
    }

    public void SetTotalTimeToAttack(long i_TotalTimeToAttack) {
        totalTimeToAttack = i_TotalTimeToAttack;
    }

    public int GetMiss() {
        return miss;
    }

    public int GetNumOfTurnsPlayed() {
        return numOfTurnsPlayed;
    }

    public BattleShipBoard GetBattleShipBoard() {
        return battleShipBoard;
    }

    public TrackingBoard GetTrackingBoard() {
        return trackingBoard;
    }

    public void InitializePlayer(BattleShipGame i_Game) throws CorruptedXMLException {
        if (i_Game == null)
            throw new CorruptedXMLException("BattleShipGame is not initialized.");

        hit = 0;
        miss = 0;
        score = 0;
        totalTimeToAttack = 0;
        numOfTurnsPlayed = 0;
        avgTimeToAttack = 0;
        initializeShipTypeList(i_Game);
        initializeBoards(i_Game);
    }

    private void initializeShipTypeList(BattleShipGame i_Game) {
        enemyShipsList.clear();
        List<BattleShipGame.ShipTypes.ShipType> gameList = i_Game.getShipTypes().getShipType();
        for (BattleShipGame.ShipTypes.ShipType type: gameList) {
            BattleShipGame.ShipTypes.ShipType newType = new BattleShipGame.ShipTypes.ShipType();
            newType.setId(type.getId());
            newType.setAmount(type.getAmount());
            newType.setCategory(type.getCategory());
            newType.setLength(type.getLength());
            newType.setScore(type.getScore());
            enemyShipsList.add(newType);
        }
    }

    private void initializeBoards(BattleShipGame i_Game) throws CorruptedXMLException {
        battleShipBoard.Initialize(i_Game, playerIndex);
        trackingBoard.Initialize(i_Game);
    }

    public HitResult Attack(int i_Row, int i_Column, Player i_Enemy) throws Exception {
        TrackingBoard.TrackingSquare[][] board = trackingBoard.GetBoard();
        if (board[i_Row][i_Column].GetHasAttacked())
            throw new Exception("This square has already been attacked.");
        numOfTurnsPlayed++;
        BattleShipBoard.BattleShipSquare[][] enemyBoard = i_Enemy.battleShipBoard.GetBoard();
        board[i_Row][i_Column].SetHasAttacked(true);
        enemyBoard[i_Row][i_Column].SetWasAttackedByPlayer(true);
        if (enemyBoard[i_Row][i_Column].GetIsBattleShipHere()) {
            board[i_Row][i_Column].SetIsOccupied(true);
            i_Enemy.battleShipBoard.SetNumOfAliveShips(i_Enemy.battleShipBoard.GetNumOfAliveShips() - 1);
            hit++;
            BattleShipBoard.BattleShipStatus shipStatus = i_Enemy.battleShipBoard.GetIdCounterToBattleShipStatusMap().get(i_Enemy.battleShipBoard.GetUniqueIDCounter(i_Row, i_Column));
            shipStatus.SetLife(shipStatus.GetLife() - 1);
            i_Enemy.battleShipBoard.GetIdCounterToBattleShipStatusMap().put(i_Enemy.battleShipBoard.GetUniqueIDCounter(i_Row, i_Column), shipStatus);
            if (shipStatus.GetLife() == 0) {
                ReduceShipAmount(enemyShipsList, shipStatus.GetType().getId());
                hitResult.isShipSank = true;
                score += shipStatus.GetScore();
            } else
                hitResult.isShipSank = false;
            hitResult.hitObject = "Battleship";
        } else if (enemyBoard[i_Row][i_Column].GetIsMineHere()) {
            hit++;
            board[i_Row][i_Column].SetIsOccupied(true);
            BattleShipBoard.BattleShipSquare[][] myBattleshipBoard = battleShipBoard.GetBoard();
            boolean wasAttacked = myBattleshipBoard[i_Row][i_Column].GetWasAttackedByPlayer() || myBattleshipBoard[i_Row][i_Column].GetWasAttackedByBackFire();
            if (!wasAttacked) {
                myBattleshipBoard[i_Row][i_Column].SetWasAttackedByBackFire(true);
                TrackingBoard.TrackingSquare[][] enemyTrackingBoard = i_Enemy.trackingBoard.GetBoard();
                enemyTrackingBoard[i_Row][i_Column].SetHasAttacked(true);
                if (myBattleshipBoard[i_Row][i_Column].GetIsBattleShipHere()) {
                    enemyTrackingBoard[i_Row][i_Column].SetIsOccupied(true);
                    battleShipBoard.SetNumOfAliveShips(battleShipBoard.GetNumOfAliveShips() - 1);
                    BattleShipBoard.BattleShipStatus shipStatus = battleShipBoard.GetIdCounterToBattleShipStatusMap().get(battleShipBoard.GetUniqueIDCounter(i_Row, i_Column));
                    shipStatus.SetLife(shipStatus.GetLife() - 1);
                    battleShipBoard.GetIdCounterToBattleShipStatusMap().put(battleShipBoard.GetUniqueIDCounter(i_Row, i_Column), shipStatus);
                    if (shipStatus.GetLife() == 0) {
                        ReduceShipAmount(i_Enemy.enemyShipsList, shipStatus.GetType().getId());
                        hitResult.isShipSank = true;
                        i_Enemy.score += shipStatus.GetScore();
                    } else
                        hitResult.isShipSank = false;
                } else {
                    enemyTrackingBoard[i_Row][i_Column].SetIsOccupied(false);
                    hitResult.isShipSank = false;
                }
            }
            hitResult.hitObject = "Mine";
        } else {
            board[i_Row][i_Column].SetIsOccupied(false);
            miss++;
            hitResult.hitObject = "Miss";
            hitResult.isShipSank = false;
        }
        return hitResult;
    }

    private void ReduceShipAmount(List<BattleShipGame.ShipTypes.ShipType> lst, String id) {
        BattleShipGame.ShipTypes.ShipType type;
        for(int i = 0; i < lst.size(); ++i)
        {
            type = lst.get(i);
            if(id.compareTo(type.getId()) == 0){
                type.setAmount(type.getAmount() - 1);
                break;
            }
        }
    }

    public void InstallMine(int i_Row, int i_Column) throws MineInstallationException {
        battleShipBoard.InstallMine(i_Row, i_Column);
        numOfTurnsPlayed++;
    }

    public void calcAverageTime() {
        avgTimeToAttack =  ((float) (totalTimeToAttack) / (float) (numOfTurnsPlayed)) / TO_SECONDS;
    }
}

